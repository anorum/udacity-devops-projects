version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:

  create-env:
    description: Create the .env file.
    steps:
      - run:
          name: Create env
          command: |
            echo "ENVIRONMENT=production" >> backend/.env
            echo "NODE_ENV=production" >> backend/.env
            echo "NODE_PORT=3030" >> backend/.env
            echo "TYPEORM_CONNECTION=postgres" >> backend/.env
            echo "TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts" >> backend/.env
            echo "TYPEORM_HOST={{ lookup('env','TYPEORM_HOST') }}" >> backend/.env
            echo "TYPEORM_PORT={{ lookup('env','TYPEORM_PORT') }}" >> backend/.env
            echo "TYPEORM_USERNAME={{ lookup('env','TYPEORM_USERNAME') }}" >> backend/.env
            echo "TYPEORM_PASSWORD={{ lookup('env','TYPEORM_PASSWORD') }}" >> backend/.env
            echo "TYPEORM_DATABASE={{ lookup('env','TYPEORM_DATABASE') }}" >> backend/.env
            echo "TYPEORM_PORT=5432" >> backend/.env
            echo "VERSION=1" >> backend/.env
            echo "PORT=3030" >> backend/.env


  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy the backend
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - run:
          name: Destroy the frontend
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail

  revert-migration:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - checkout
      - run:
          name: Install dependencies
          when: on_fail
          command: |
            apk add --update nodejs npm curl
      - create-env
      - run:
          name: Revert migrations
          when: on_fail
          command: |
          if (( $(curl -H "token: 30abd32d-cae9-401b-b4ef-9f9228c77d99" --request GET https://api.memstash.io/values/"${CIRCLE_WORKFLOW_ID:0:7}_migrations" == 'yes' )))
            then  
              cd backend
              npm i
              npm run build
              npm run migrations:revert
            fi;
      - destroy-environment



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-cache
      - run:
          name: Build the frontend
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          key: frontend-cache
          paths:
            - frontend/node_modules

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-cache
      - run:
          name: Build the backend
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          key: backend-cache
          paths:
            - backend/node_modules

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-cache
      - run:
          name: Test the Frontend
          command: |
            cd frontend
            npm i
            npm run test
      - store_test_results:
          path: ./frontend/coverage/


  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-cache
      - run:
          name: Test the backend
          command: |
            cd backend
            npm i
            npm run test
      - store_test_results:
          path: ./backend/coverage/

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-cache
      - run:
          name: Scan the frontend
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical
      - save_cache:
          key: frontend-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-cache
      - run:
          name: Scan the backend
          command: |
            cd backend
            npm i
            npm audit --audit-level=critical
      - save_cache:
          key: backend-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      #Required to persist
      - run: yum -y install tar gzip
      - run:
          name: Create backend with Cloudformation
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Create frontend with Cloudformation
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          # Decided to just put it straight in the inventory file so I can use it later for configuration
          name: Save new backend url to inventory file
          command: |
            echo [server] > .circleci/ansible/inventory
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory
            cat .circleci/ansible/inventory
      - run:
          name: Write S3 buckets name to memstash
          command: |
            frontend_bucket_name=$(echo "udapeople-${CIRCLE_WORKFLOW_ID:0:7}")
            curl -H "Content-Type: text/plain" -H "token: c1106d5f-65cc-4d53-9393-71ec763e84df" \
            --request PUT --data "${frontend_bucket_name}" \
            https://api.memstash.io/values/bucket_name
      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["77:5c:ed:6f:a1:a8:ef:b5:b6:ba:98:31:8f:4a:9d:12"]
      - run:
          name: Install Dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Create Inventory file
          command: |
            echo [server] > .circleci/ansible/inventory
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory
            cat .circleci/ansible/inventory
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i .circleci/ansible/inventory .circleci/ansible/main.yml
    
    

  run-migrations:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-cache
      - run:
          name: Install Dependencies
          command: |
            pip install awscli
            apk add --update nodejs npm curl
      - create-env
      - run:
          name: Run migrations
          become: yes
          command: |
            cd backend
            npm i 
            npm run migrations > migrated.txt
            cat migrated.txt
      - run:
          name: Persist migrations status
          command: |
            cd backend
            if grep -q "has been executed successfully." migrated.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 30abd32d-cae9-401b-b4ef-9f9228c77d99" --request PUT --data "yes" https://api.memstash.io/values/"${CIRCLE_WORKFLOW_ID:0:7}_migrations"
              echo "<< pipeline.id >>_migrations did run"
            else
              curl -H "Content-Type: text/plain" -H "token: 30abd32d-cae9-401b-b4ef-9f9228c77d99" --request PUT --data "no" https://api.memstash.io/values/"${CIRCLE_WORKFLOW_ID:0:7}_migrations"
              echo "<< pipeline.id >>_migrations did not run"
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["77:5c:ed:6f:a1:a8:ef:b5:b6:ba:98:31:8f:4a:9d:12"]
      - restore_cache: 
          keys: 
            - frontend-cache
      - run:
          name: install Node and NPM
          command: |
            apk add --update nodejs npm 
            pip install awscli
      - run:
          name: Build frontend
          command: |
            export API_URL=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0.7}" \
            --query 'Reservations[*].Instances[*].PublicDnsName'\
            --output text):3030
            cd frontend
            npm i
            npm run build
            aws s3 sync "./dist" s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment
      - revert-migration

  deploy-backend:
    docker:
    - image: python:3.7-alpine3.11
    steps:
      - checkout
      - create-env
      - add_ssh_keys:
          fingerprints: ["77:5c:ed:6f:a1:a8:ef:b5:b6:ba:98:31:8f:4a:9d:12"]
      - run:
          name: Install dependencies
          become: yes
          command: |
            apk add --update ansible nodejs npm tar gzip
            pip install awscli
      - run:
          name: Zip the backend
          command: |
            tar -C backend -czvf backend.tar.gz .
      - run:
          name: Create Inventory file
          command: |
            echo [server] > .circleci/ansible/inventory
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory
            cat .circleci/ansible/inventory
          
      - run: 
          name: Deploy server using ansible playbook
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i .circleci/ansible/inventory .circleci/ansible/deploy-backend-server.yml  
          no_output_timeout: 45m



  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          become: yes
          command: |
            apk add --update ansible nodejs npm curl
            pip install awscli
      - run:
          name: Frontend Health checkout
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            if curl -s ${URL} | grep "Welcome"
            then
            exit 0
            else
            exit 1
            fi
      - run:
          name: Backend Healthy API curl
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            curl "http://${BACKEND_IP}:3030/api/status"
      - destroy-environment
      - revert-migration

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["77:5c:ed:6f:a1:a8:ef:b5:b6:ba:98:31:8f:4a:9d:12"]
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            echo Old Workflow Id: "$(OldWorkflowID)"

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID="$(CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople &

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

      - destroy-environment
      - revert-migration

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - scan-backend:
          requires: 
            - build-backend
      - deploy-infrastructure:
          requires:
            - scan-backend
            - scan-frontend
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires:
            - smoke-test
